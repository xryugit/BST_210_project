---
title: "EDA"
format: pdf
editor: visual
execute:
  echo: false
---

**Group 26**

**Academic Grasshoppers**

**Yinjie Wu**

**Yuan Tian**

**Xinran Yu**

No member of this group is using these data or same/similar questions in any other course or course project, at HSPH.

![](images/image.png)

```         
install.packages(c("tidyverse", "NHANES", "foreign", "haven", "survey", "mice"))
install.packages("Rnhanesdata")
```

## Import data

mutate(DPQ, )


```{r}

getwd()
setwd("./data/2020")

ALQ <- read_xpt("P_ALQ.XPT")
BIOPRO <- read_xpt("P_BIOPRO.XPT")
BMX <- read_xpt("P_BMX.XPT")
BPXO <- read_xpt("P_BPXO.XPT")
DEMO <- read_xpt("P_DEMO.XPT")
#FOLATE <- read_xpt("P_FOLATE.XPT")
PAQ <- read_xpt("P_PAQ.XPT")
SLQ <- read_xpt("P_SLQ.XPT")
TCHOL <- read_xpt("P_TCHOL.XPT")
DPQ_raw <- read_xpt("P_DPQ.XPT")
FETIB <- read_xpt("P_FETIB.XPT")

DPQ <- DPQ_raw %>% 
    filter(complete.cases(select(., starts_with("DPQ"))[-1])) %>% 
    mutate(depression_score = rowSums(select(., starts_with("DPQ"))[-1])) |> #%>% 
    mutate(depression_category = case_when(
        depression_score <= 4 ~ "Minimal",
        depression_score <= 9 ~ "Mild",
        depression_score <= 14 ~ "Moderate",
        depression_score <= 19 ~ "Moderately severe",
        depression_score >= 20 ~ "Severe"
    ))

BPXO <- BPXO %>%
  mutate(
    MAP1 = (1 / 3) * BPXOSY1 + (2 / 3) * BPXODI1,
    MAP2 = (1 / 3) * BPXOSY2 + (2 / 3) * BPXODI2,
    MAP3 = (1 / 3) * BPXOSY3 + (2 / 3) * BPXODI3,
    avg_MAP = rowMeans(cbind(MAP1, MAP2, MAP3), na.rm = TRUE)
  )
datasets <- list(ALQ, BIOPRO, BMX, BPXO, DEMO,  PAQ, SLQ, TCHOL, DPQ)
test <- reduce(datasets, inner_join, by = "SEQN")  


temp <- select(test, SEQN , BMXBMI, avg_MAP, ALQ130, RIAGENDR, RIDRETH1, RIDAGEYR, INDFMPIR, PAD680, LBDTCSI, depression_score, depression_category)

dat_raw <- left_join(SLQ, temp)

new_colnames <-  c(
  "ID",                          # SEQN; Respondent sequence number
  "sleep_time_weekdays",       # SLQ300;Usual_sleep_time_weekdays
  "wake_time_weekdays",        # SLQ310;Usual_wake_time_weekdays
  "sleep_hours_weekdays",            # SLD012;Sleep_hours_weekdays
  "sleep_time_weekends",       # SLQ320;Usual_sleep_time_weekends
  "wake_time_weekends",        # SLQ330;Usual_wake_time_weekends
  "sleep_hours_weekends",            # SLD013;Sleep_hours_weekends
  "frq_snore",                 # SLQ030;How_often_snore
  "frq_snort_or_stop_breathing",# SLQ040;How_often_snort_or_stop_breathing
  "sleep_trouble",  # SLQ050;Ever_told_doctor_sleep_trouble
  "overly_sleepy",          # SLQ120;Feel_overly_sleepy_day
  "BMI",                         # BMXBMI; Body Mass Index
  "avg_MAP",                     # avg_MAP; Average Mean Arterial Pressure
  "alcohol",                     # ALQ130; How often drink alcohol
  "gender",                      # RIAGENDR; Gender
  "Race_Hispanic_origin",        # RIDRETH1; Race/Hispanic origin
  "age",                         # RIDAGEYR; Age at screening
  "Family_income_to_poverty_ratio",  # INDFMPIR; Family income to poverty ratio
  "sedentary_activity",          # PAD680; Minutes sedentary activity
  "total_cholesterol",           # LBDTCSI; Total cholesterol mmol/L
  "depression_score",            # depression_score; Depression score
  "depression_category"          # depression_category; Depression category
)
colnames(dat_raw) <- new_colnames
# remove all lines with NA
dat_raw[dat_raw == ""] <- NA
dat_clean <- dat_raw |>
  drop_na() |>
   filter(alcohol < 16 & frq_snore != 7 & frq_snore != 9 & frq_snort_or_stop_breathing != 7 & frq_snort_or_stop_breathing != 9 & sleep_trouble != 9 & overly_sleepy != 9 & sedentary_activity < 5000) |>
  mutate(across(c(sleep_time_weekdays,wake_time_weekdays,sleep_time_weekends,wake_time_weekends), hm)) |>
  mutate(across(c(ID,frq_snore,frq_snort_or_stop_breathing,sleep_trouble,overly_sleepy,gender,Race_Hispanic_origin),as.factor)) |>
  mutate(across(c(,),as.numeric)) |>
  mutate(sleep_hours_avg = 2/7*sleep_hours_weekends+5/7*sleep_hours_weekdays)

```


## scanning cleaned data

```{r}
str(dat_clean) 
summary(dat_clean) 
```

## Correlations

```{r}

summary(dat_clean)

numeric_vars <- select(dat_clean, age, BMI, avg_MAP, Family_income_to_poverty_ratio, 
                       sedentary_activity, total_cholesterol, sleep_hours_weekdays, depression_score, alcohol)


for (col in colnames(numeric_vars)) {
  data_range <- range(dat_clean[[col]], na.rm = TRUE)
  binwidth <- (data_range[2] - data_range[1]) / 30  
  
  p <- ggplot(dat_clean, aes_string(x = col)) +
    geom_histogram(binwidth = binwidth, alpha = 0.7) +
    labs(title = paste("Distribution of", col), x = col, y = "Frequency") +
    theme_minimal()
  print(p)
}


categorical_vars <- select(dat_clean, gender, Race_Hispanic_origin, sleep_trouble, overly_sleepy, depression_category)

for (col in colnames(categorical_vars)) {
  p <- ggplot(dat_clean, aes_string(x = col)) +
    geom_bar( alpha = 0.7) +
    labs(title = paste("Distribution of", col), x = col, y = "Count") +
    theme_minimal() +
    scale_x_discrete(drop = FALSE)  
  print(p)
}


```

```{r}
for (col in colnames(numeric_vars)) {
  if (col != "depression_score") {
    p <- ggplot(dat_clean, aes_string(x = col, y = "depression_score")) +
      geom_point(alpha = 0.5) +
      geom_smooth(method = "lm", col = "red", se = FALSE) +
      labs(title = paste("Scatter Plot of", col, "vs Depression Score"), x = col, y = "Depression Score") +
      theme_minimal()
    print(p)
  }
}

for (col in colnames(categorical_vars)) {
  if (col != "depression_category") {
    p <- ggplot(dat_clean, aes_string(x = col, y = "depression_score")) +
      geom_boxplot(fill = "purple", alpha = 0.7) +
      labs(title = paste("Box Plot of", col, "vs Depression Score"), x = col, y = "Depression Score") +
      theme_minimal()
    print(p)
  }
}

for (col in colnames(categorical_vars)) {
  if (col != "depression_category") {
    p <- ggplot(dat_clean, aes_string(x = col, fill = "depression_category")) +
      geom_bar(position = "fill") +
      labs(title = paste("Distribution of", col, "by Depression Category"), x = col, y = "Proportion") +
      theme_minimal()
    print(p)
  }
}


```

```{r}
for (col in colnames(numeric_vars)) {
  if (col != "depression_score") {
    p <- ggplot(dat_clean, aes_string(x = col, y = "depression_score")) +
      geom_point(alpha = 0.5) +
      geom_smooth(method = "lm", col = "red", se = FALSE) +
      labs(title = paste("Scatter Plot of", col, "vs Depression Score"), x = col, y = "Depression Score") +
      theme_minimal()
    print(p)
  }
}

for (col in colnames(categorical_vars)) {
  if (col != "depression_score") {
    p <- ggplot(dat_clean, aes_string(x = col, y = "depression_score")) +
      geom_boxplot(fill = "purple", alpha = 0.7) +
      labs(title = paste("Box Plot of", col, "vs Depression Score"), x = col, y = "Depression Score") +
      theme_minimal()
    print(p)
  }
}

for (col in colnames(categorical_vars)) {
  if (col != "depression_score") {
    p <- ggplot(dat_clean, aes_string(x = col, fill = "depression_category")) +
      geom_bar(position = "fill") +
      labs(title = paste("Distribution of", col, "by Depression Category"), x = col, y = "Proportion") +
      theme_minimal()
    print(p)
  }
}
```

```{r}
for (col in colnames(numeric_vars)) {
  p <- ggplot(dat_clean, aes_string(x = "sleep_trouble", y = col)) +
    geom_boxplot(fill = "purple", alpha = 0.7) +
    labs(title = paste("Box Plot of", col, "vs Sleep Trouble"), x = "Sleep Trouble", y = col) +
    theme_minimal()
  print(p)
}


for (col in colnames(categorical_vars)) {
  if (col != "sleep_trouble") {
    p <- ggplot(dat_clean, aes_string(x = col, fill = "sleep_trouble")) +
      geom_bar(position = "fill") +
      labs(title = paste("Distribution of", col, "by Sleep Trouble"), x = col, y = "Proportion") +
      theme_minimal() +
      scale_fill_discrete(drop = FALSE)  # Ensure all levels of sleep_trouble are represented
    print(p)
  }
}
```

```{r}

for (col in colnames(numeric_vars)) {
  p <- ggplot(dat_clean, aes_string(x = "frq_snore", y = col)) +
    geom_boxplot(fill = "orange", alpha = 0.7) +
    labs(title = paste("Box Plot of", col, "vs frq_snore"), x = "frq_snore", y = col) +
    theme_minimal()
  print(p)
}

for (col in colnames(categorical_vars)) {
  if (col != "sleep_diagnosed") {
    p <- ggplot(dat_clean, aes_string(x = col, fill = "frq_snore")) +
      geom_bar(position = "fill") +
      labs(title = paste("Distribution of", col, "by frq_snore"), x = col, y = "Proportion") +
      theme_minimal() +
      scale_fill_discrete(drop = FALSE)
    print(p)
  }
}
```

```{r}
for (col in colnames(numeric_vars)) {
  if (col != "sleep_hours_weekdays") {
    p <- ggplot(dat_clean, aes_string(x = col, y = "sleep_hours_weekdays")) +
      geom_point(alpha = 0.5) +
      geom_smooth(method = "lm", col = "red", se = FALSE) +
      labs(title = paste("Scatter Plot of", col, "vs sleep_hours_weekdays"), x = col, y = "sleep_hours_weekdays") +
      theme_minimal()
    print(p)
  }
}

for (col in colnames(categorical_vars)) {
  p <- ggplot(dat_clean, aes_string(x = col, y = "sleep_hours_weekdays")) +
    geom_boxplot(fill = "cyan", alpha = 0.7) +
    labs(title = paste("Box Plot of", col, "vs sleep_hours_weekdays"), x = col, y = "sleep_hours_weekdays") +
    theme_minimal()
  print(p)
}
```

```{r}
ggplot(dat_clean, aes(x = sleep_trouble, fill = frq_snore)) +
  geom_bar(position = "dodge", alpha = 0.8) +
  labs(
    title = "Relationship between Sleep Trouble  and frq_snore ",
    x = "Told Doctor They Had Sleep Trouble",
    y = "Count",
    fill = "Diagnosed by Doctor"
  ) +
  theme_minimal() +
  scale_fill_brewer(palette = "Set1")
```

```{r}
ggplot(dat_clean, aes(x = sleep_trouble, y = sleep_hours_weekdays)) +
  geom_boxplot(fill = "skyblue", alpha = 0.7) +
  labs(
    title = "Relationship between Sleep Trouble (Self-Reported) and sleep hours",
    x = "Sleep Trouble (Self-Reported)",
    y = "Usual Sleep Hours"
  ) +
  theme_minimal()
```

```{r}
ggplot(dat_clean, aes(x = frq_snore, y = sleep_hours_weekdays)) +
  geom_boxplot(fill = "skyblue", alpha = 0.7) +
  labs(
    title = "Relationship between frq_snore and Sleep Hours",
    x = "frq_snore",
    y = "Usual Sleep Hours"
  ) +
  theme_minimal()
```

```{r}
#write.csv(dat_clean, "2017_20_clean.csv", row.names = FALSE)
```

```{r}

dat_temp <- DEMO
other_dfs <- Filter(function(df) !is.null(df) && "SEQN" %in% colnames(df), 
                    list(DEMO, SLQ,ALQ, BIOPRO, BMX, BPXO, DEMO,  PAQ,  TCHOL, DPQ))

for (df in other_dfs) {
    dat_temp <- left_join(dat_temp, df, by = "SEQN")
}
dat_subset <- select(dat_temp,
                     SEQN,                  # Corresponds to "ID"
                     SLQ300,                # Corresponds to "sleep_time_weekdays"
                     SLQ310,                # Corresponds to "wake_time_weekdays"
                     SLD012,                # Corresponds to "sleep_hours_weekdays"
                     SLQ320,                # Corresponds to "sleep_time_weekends"
                     SLQ330,                # Corresponds to "wake_time_weekends"
                     SLD013,                # Corresponds to "sleep_hours_weekends"
                     SLQ030,                # Corresponds to "frq_snore"
                     SLQ040,                # Corresponds to "frq_snort_or_stop_breathing"
                     SLQ050,                # Corresponds to "sleep_trouble"
                     SLQ120,                # Corresponds to "overly_sleepy"
                     BMXBMI,                # Corresponds to "BMI"
                     avg_MAP,               # Corresponds to "avg_MAP"
                     ALQ130,                # Corresponds to "alcohol"
                     RIAGENDR,              # Corresponds to "gender"
                     RIDRETH1,              # Corresponds to "Race_Hispanic_origin"
                     RIDAGEYR,              # Corresponds to "age"
                     INDFMPIR,              # Corresponds to "Family_income_to_poverty_ratio"
                     PAD680,                # Corresponds to "sedentary_activity"
                     LBDTCSI,               # Corresponds to "total_cholesterol"
                     depression_score,      # Corresponds to "depression_score"
                     depression_category    # Corresponds to "depression_category"
)
colnames(dat_subset) <- new_colnames
subset_pat<-md.pattern(dat_subset)
#md.pattern(dat_temp)
```



```{r}
vis_miss(dat_subset)
```


```
                     SLQ300,                # Corresponds to "sleep_time_weekdays"
                     SLQ310,                # Corresponds to "wake_time_weekdays"
                     SLD012,                # Corresponds to "sleep_hours_weekdays"
                     SLQ320,                # Corresponds to "sleep_time_weekends"
                     SLQ330,                # Corresponds to "wake_time_weekends"
                     SLD013,                # Corresponds to "sleep_hours_weekends"
                     SLQ030,                # Corresponds to "frq_snore"
                     SLQ040,                # Corresponds to "frq_snort_or_stop_breathing"
                     SLQ050,                # Corresponds to "sleep_trouble"
                     SLQ120,                # Corresponds to "overly_sleepy"
```


```{r}
dat_subset_missing_indicators <- dat_subset %>%
  mutate(across(everything(), ~ ifelse(is.na(.), 1, 0), .names = "miss_{col}"))

summary(glm(miss_sleep_trouble ~ BMI, data = dat_subset_missing_indicators, family = binomial))
```

```{r}
dat_subset_missing_indicators <- dat_subset %>%
  mutate(miss_sleep_trouble = ifelse(is.na(sleep_trouble), 1, 0))

covariate_names <- setdiff(names(dat_subset_missing_indicators), c("sleep_time_weekdays", "miss_sleep_time_weekdays", "ID", "sleep_hours_weekdays", "miss_sleep_hours_weekdays", "wake_time_weekdays","miss_wake_time_weekdays", "sleep_time_weekends","miss_sleep_time_weekends" ,"wake_time_weekends","miss_wake_time_weekends", "depression_category" ,"sleep_hours_weekends", "miss_sleep_hours_weekends" , "frq_snort_or_stop_breathing" , "miss_frq_snort_or_stop_breathing"))

results_list <- list()

for (covariate in covariate_names) {
  # Define the formula
  formula <- as.formula(paste("miss_sleep_trouble ~", covariate))
  
  # Fit the model and handle warnings and errors
  tryCatch({
    model <- glm(formula, data = dat_subset_missing_indicators, family = binomial, control = glm.control(maxit = 50))
    if (!model$converged) {
      warning(paste("Model did not converge for covariate:", covariate))
    } else {
      summary_model <- summary(model)
      p_value <- summary_model$coefficients[2, 4]
      
      # Store the results
      results_list[[covariate]] <- list(
        estimate = summary_model$coefficients[2, 1],
        std_error = summary_model$coefficients[2, 2],
        z_value = summary_model$coefficients[2, 3],
        p_value = p_value
      )
    }
  }, error = function(e) {
    message(paste("Model failed for covariate:", covariate, "with error:", e$message))
  }, warning = function(w) {
    message(paste("Warning for covariate:", covariate, "-", w$message))
  })
}

if (length(results_list) > 0) {
  results_df <- do.call(rbind, lapply(names(results_list), function(name) {
    c(covariate = name, results_list[[name]])
  }))
  
  print(results_df)
} else {
  message("No models converged successfully.")
}

```

```{r}
results_df <- as.data.frame(results_df)

results_df$estimate <- as.numeric(results_df$estimate)
results_df$p_value <- as.numeric(results_df$p_value)

ggplot(results_df, aes(x = estimate, y = -log10(p_value), label = covariate)) +
  geom_point(aes(color = p_value < 0.05), size = 3) +  
  geom_text_repel(
    aes(label = covariate, color = p_value < 0.05),  
    size = 3
  ) +
  scale_color_manual(
    values = c("TRUE" = "red", "FALSE" = "blue"),    
    labels = c("FALSE" = "Not Significant", "TRUE" = "Significant")
  ) +
  labs(
    x = "Coefficient Estimate",
    y = "-log10(p-value)",
    title = "Logistic Regression Results for Missingness of sleep_trouble",
    color = "Significance (p < 0.05)"
  ) +
  theme_minimal() +
  coord_cartesian(xlim = c(-2, 2))
```

```{r}
all_covariates_formula <- as.formula(paste("miss_sleep_trouble ~", paste(covariate_names, collapse = " + ")))
multivariable_model <- glm(all_covariates_formula, data = dat_subset_missing_indicators, family = binomial)
summary(multivariable_model)
```

```{r}

imputed_data <- mice(
  dat_subset,
  m = 5,              
  maxit = 10,          
  method = 'pmm',      
  delta = 0            
)
completed_data <- complete(imputed_data, action = 1)
write.csv(completed_data, file = "./data/Imputed_Dataset_2017_20.csv", row.names = FALSE)

```

**Group 26**

**Academic Grasshoppers**

**Yinjie Wu**

**Yuan Tian**

**Xinran Yu**

Project Attestation: No member of this group is using these data or same/similar questions in any other course or course project, at HSPH. By listing your name as a group member on your project, and submitting this assignment, you are attesting to this statement above. Groups must include this attestation here under Question 11 in order to receive credit for HW4!

# Code Appendix

```{r, ref.label=knitr::all_labels(),echo=TRUE,eval=FALSE}
```
