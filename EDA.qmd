---
title: "EDA"
format: pdf
editor: visual
execute:
  echo: false
---

**Group 26**

**Academic Grasshoppers**

**Yinjie Wu**

**Yuan Tian**

**Xinran Yu**

No member of this group is using these data or same/similar questions in any other course or course project, at HSPH.

![](images/image.png)

```         
install.packages(c("tidyverse", "NHANES", "foreign", "haven", "survey", "mice"))
install.packages("Rnhanesdata")
```

## Import data

mutate(DPQ, )

```{r,warning=FALSE}
library(tidyverse)   
library(haven)      
library(NHANES)     
library(dplyr)  
library(purrr)
library(lubridate)

getwd()
setwd("./data/13_14")

ALQ <- read_xpt("ALQ_H.XPT")
BIOPRO <- read_xpt("BIOPRO_H.XPT")
BMX <- read_xpt("BMX_H.XPT")
BPX <- read_xpt("BPX_H.XPT")
CAFE <- read_xpt("CAFE_H.XPT")
CUSEZN <- read_xpt("CUSEZN_H.XPT") #zinc
DEMO <- read_xpt("DEMO_H.XPT")
DPQ_raw <- read_xpt("DPQ_H.XPT")
GLU <- read_xpt("GLU_H.XPT")
INQ <- read_xpt("INQ_H.XPT")
PAQ <- read_xpt("PAQ_H.XPT")
SLQ <- read_xpt("SLQ_H.XPT")
TCHOL <- read_xpt("TCHOL_H.XPT")
VID <- read_xpt("VID_H.XPT")
VITB12 <- read_xpt("VITB12_H.XPT")

DPQ <- DPQ_raw %>%
    # Remove rows with any NA in DPQ columns (excluding SEQN)
    filter(complete.cases(select(., starts_with("DPQ"))[-1])) %>%
    # Calculate total depression score
    mutate(depression_score = rowSums(select(., starts_with("DPQ"))[-1])) %>%
    # Categorize total depression score into levels
    mutate(depression_category = case_when(
        depression_score <= 4 ~ "Minimal",
        depression_score <= 9 ~ "Mild",
        depression_score <= 14 ~ "Moderate",
        depression_score <= 19 ~ "Moderately severe",
        depression_score >= 20 ~ "Severe"
    ))

# Calculate average systolic and diastolic blood pressure using all four readings
BPX <- BPX %>%
  mutate(
    avg_systolic = rowMeans(select(., BPXSY1, BPXSY2, BPXSY3, BPXSY4), na.rm = TRUE),
    avg_diastolic = rowMeans(select(., BPXDI1, BPXDI2, BPXDI3, BPXDI4), na.rm = TRUE)
  )

# Add screen time variable to PAQ dataset with custom recoding
PAQ <- PAQ %>%
  mutate(
    PAQ710 = case_when(
      PAQ710 == 8 ~ 0,
      PAQ710 == 77 ~ NA_real_,
      PAQ710 == 99 ~ NA_real_,
      TRUE ~ as.numeric(PAQ710)
    ),
    PAQ715 = case_when(
      PAQ715 == 8 ~ 0,
      PAQ715 == 77 ~ NA_real_,
      PAQ715 == 99 ~ NA_real_,
      TRUE ~ as.numeric(PAQ715)
    ),
    screen_time = PAQ710 + PAQ715
  )

# View a glimpse of the modified dataset to confirm the changes
glimpse(PAQ)


# View a glimpse of the modified dataset to confirm the changes
glimpse(BPX)


datasets <- list(ALQ, BIOPRO, BMX,BPX, DEMO , PAQ, SLQ, TCHOL, DPQ , INQ, VID, VITB12)
test <- reduce(datasets, inner_join, by = "SEQN")  


temp <- select(test, SEQN, RIDAGEYR, RIAGENDR, RIDRETH3, ALQ120Q , BMXBMI, avg_systolic,INDFMMPI, screen_time ,PAD680 ,LBDTCSI, SLD010H ,SLQ050, SLQ060, depression_score, depression_category, LBXVIDMS, LBDB12SI)

dat_raw <- left_join(SLQ, temp)

# DMDEDUC2(education level 20+)
# DMDMARTZ - Marital status
```

## scanning raw data

```{r}
str(dat_raw) 
summary(dat_raw) 
```

## Data cleaning

```{r}
# rename cols
new_colnames <- c(
  
  "ID",                           # SEQN; Respondent sequence number
  "sleep_hours",            # SLD010H; Usual hours of sleep on weekdays
  "sleep_trouble",          # SLQ050; Ever told doctor had trouble sleeping?
  "sleep_diagnosed",        # SLQ060; Ever told by doctor have sleep disorder?
  "age",                          # RIDAGEYR; Age at screening
  "gender",                       # RIAGENDR; Gender
  "race_ethnicity",               # RIDRETH3; Race/Ethnicity category
  "alcohol",     # ALQ120Q; How often drank alcohol in past 12 months
  "BMI",
  "avg_systolic_bp",              # avg_systolic; Average systolic blood pressure
  "income", # INDFMMPI; Family income to poverty ratio
  "screen_time",                   # TV+computer time
  "sedentary_minutes",            # PAD680; Minutes of sedentary activity
  "total_cholesterol",            # LBDTCSI; Total cholesterol (mg/dL)

  "depression_score",             # depression_score; Calculated total depression score
  "depression_category",          # depression_category; Depression score category
  "vitamin_d",                    # LBXVIDMS; Vitamin D level (nmol/L)
  "vitamin_b12"                   # LBDB12SI; Vitamin B12 level (pmol/L)
)
colnames(dat_raw) <- new_colnames
# remove all lines with NA
dat_raw[dat_raw == ""] <- NA
dat_clean <- dat_raw |>
  drop_na() |>
  filter(alcohol < 400  & sedentary_minutes < 6000 & sleep_hours < 66 & sleep_trouble < 3 & sleep_diagnosed < 3 & vitamin_b12 <= 2500 & vitamin_d <= 200, total_cholesterol < 20) |>
  mutate(across(c(ID, sleep_trouble, sleep_diagnosed, gender, race_ethnicity), as.factor))




```

## scanning cleaned data

```{r}
str(dat_clean) 
summary(dat_clean) 
```

## Correlations

```{r}

summary(dat_clean)

numeric_vars <- select(dat_clean, age, BMI, avg_systolic_bp, income, screen_time, sedentary_minutes, total_cholesterol, sleep_hours, depression_score, vitamin_d, vitamin_b12)


for (col in colnames(numeric_vars)) {
  data_range <- range(dat_clean[[col]], na.rm = TRUE)
  binwidth <- (data_range[2] - data_range[1]) / 30  
  
  p <- ggplot(dat_clean, aes_string(x = col)) +
    geom_histogram(binwidth = binwidth, alpha = 0.7) +
    labs(title = paste("Distribution of", col), x = col, y = "Frequency") +
    theme_minimal()
  print(p)
}


categorical_vars <- select(dat_clean, gender, race_ethnicity, sleep_trouble, sleep_diagnosed, depression_category)

for (col in colnames(categorical_vars)) {
  p <- ggplot(dat_clean, aes_string(x = col)) +
    geom_bar( alpha = 0.7) +
    labs(title = paste("Distribution of", col), x = col, y = "Count") +
    theme_minimal() +
    scale_x_discrete(drop = FALSE)  
  print(p)
}


```

```{r}
for (col in colnames(numeric_vars)) {
  if (col != "depression_score") {
    p <- ggplot(dat_clean, aes_string(x = col, y = "depression_score")) +
      geom_point(alpha = 0.5) +
      geom_smooth(method = "lm", col = "red", se = FALSE) +
      labs(title = paste("Scatter Plot of", col, "vs Depression Score"), x = col, y = "Depression Score") +
      theme_minimal()
    print(p)
  }
}

for (col in colnames(categorical_vars)) {
  if (col != "depression_category") {
    p <- ggplot(dat_clean, aes_string(x = col, y = "depression_score")) +
      geom_boxplot(fill = "purple", alpha = 0.7) +
      labs(title = paste("Box Plot of", col, "vs Depression Score"), x = col, y = "Depression Score") +
      theme_minimal()
    print(p)
  }
}

for (col in colnames(categorical_vars)) {
  if (col != "depression_category") {
    p <- ggplot(dat_clean, aes_string(x = col, fill = "depression_category")) +
      geom_bar(position = "fill") +
      labs(title = paste("Distribution of", col, "by Depression Category"), x = col, y = "Proportion") +
      theme_minimal()
    print(p)
  }
}


```

```{r}
for (col in colnames(numeric_vars)) {
  if (col != "depression_score") {
    p <- ggplot(dat_clean, aes_string(x = col, y = "depression_score")) +
      geom_point(alpha = 0.5) +
      geom_smooth(method = "lm", col = "red", se = FALSE) +
      labs(title = paste("Scatter Plot of", col, "vs Depression Score"), x = col, y = "Depression Score") +
      theme_minimal()
    print(p)
  }
}

for (col in colnames(categorical_vars)) {
  if (col != "depression_score") {
    p <- ggplot(dat_clean, aes_string(x = col, y = "depression_score")) +
      geom_boxplot(fill = "purple", alpha = 0.7) +
      labs(title = paste("Box Plot of", col, "vs Depression Score"), x = col, y = "Depression Score") +
      theme_minimal()
    print(p)
  }
}

for (col in colnames(categorical_vars)) {
  if (col != "depression_score") {
    p <- ggplot(dat_clean, aes_string(x = col, fill = "depression_category")) +
      geom_bar(position = "fill") +
      labs(title = paste("Distribution of", col, "by Depression Category"), x = col, y = "Proportion") +
      theme_minimal()
    print(p)
  }
}
```

```{r}
for (col in colnames(numeric_vars)) {
  p <- ggplot(dat_clean, aes_string(x = "sleep_trouble", y = col)) +
    geom_boxplot(fill = "purple", alpha = 0.7) +
    labs(title = paste("Box Plot of", col, "vs Sleep Trouble"), x = "Sleep Trouble", y = col) +
    theme_minimal()
  print(p)
}


for (col in colnames(categorical_vars)) {
  if (col != "sleep_trouble") {
    p <- ggplot(dat_clean, aes_string(x = col, fill = "sleep_trouble")) +
      geom_bar(position = "fill") +
      labs(title = paste("Distribution of", col, "by Sleep Trouble"), x = col, y = "Proportion") +
      theme_minimal() +
      scale_fill_discrete(drop = FALSE)  # Ensure all levels of sleep_trouble are represented
    print(p)
  }
}
```

```{r}

for (col in colnames(numeric_vars)) {
  p <- ggplot(dat_clean, aes_string(x = "sleep_diagnosed", y = col)) +
    geom_boxplot(fill = "orange", alpha = 0.7) +
    labs(title = paste("Box Plot of", col, "vs Sleep Diagnosed"), x = "Sleep Diagnosed", y = col) +
    theme_minimal()
  print(p)
}

for (col in colnames(categorical_vars)) {
  if (col != "sleep_diagnosed") {
    p <- ggplot(dat_clean, aes_string(x = col, fill = "sleep_diagnosed")) +
      geom_bar(position = "fill") +
      labs(title = paste("Distribution of", col, "by Sleep Diagnosed"), x = col, y = "Proportion") +
      theme_minimal() +
      scale_fill_discrete(drop = FALSE)
    print(p)
  }
}
```

```{r}
for (col in colnames(numeric_vars)) {
  if (col != "sleep_hours") {
    p <- ggplot(dat_clean, aes_string(x = col, y = "sleep_hours")) +
      geom_point(alpha = 0.5) +
      geom_smooth(method = "lm", col = "red", se = FALSE) +
      labs(title = paste("Scatter Plot of", col, "vs Sleep Hours"), x = col, y = "Sleep Hours") +
      theme_minimal()
    print(p)
  }
}

for (col in colnames(categorical_vars)) {
  p <- ggplot(dat_clean, aes_string(x = col, y = "sleep_hours")) +
    geom_boxplot(fill = "cyan", alpha = 0.7) +
    labs(title = paste("Box Plot of", col, "vs Sleep Hours"), x = col, y = "Sleep Hours") +
    theme_minimal()
  print(p)
}
```

```{r}
ggplot(dat_clean, aes(x = sleep_trouble, fill = sleep_diagnosed)) +
  geom_bar(position = "dodge", alpha = 0.8) +
  labs(
    title = "Relationship between Sleep Trouble (Self-Reported) and Sleep Diagnosed (By Doctor)",
    x = "Told Doctor They Had Sleep Trouble",
    y = "Count",
    fill = "Diagnosed by Doctor"
  ) +
  theme_minimal() +
  scale_fill_brewer(palette = "Set1")
```

```{r}
ggplot(dat_clean, aes(x = sleep_trouble, y = sleep_hours)) +
  geom_boxplot(fill = "skyblue", alpha = 0.7) +
  labs(
    title = "Relationship between Sleep Trouble (Self-Reported) and Sleep Hours",
    x = "Sleep Trouble (Self-Reported)",
    y = "Usual Sleep Hours"
  ) +
  theme_minimal()
```


```{r}
ggplot(dat_clean, aes(x = sleep_diagnosed, y = sleep_hours)) +
  geom_boxplot(fill = "skyblue", alpha = 0.7) +
  labs(
    title = "Relationship between Sleep Diagnosed and Sleep Hours",
    x = "Sleep Trouble (Self-Reported)",
    y = "Usual Sleep Hours"
  ) +
  theme_minimal()
```

# Q11

**Group 26**

**Academic Grasshoppers**

**Yinjie Wu**

**Yuan Tian**

**Xinran Yu**

Project Attestation: No member of this group is using these data or same/similar questions in any other course or course project, at HSPH. By listing your name as a group member on your project, and submitting this assignment, you are attesting to this statement above. Groups must include this attestation here under Question 11 in order to receive credit for HW4!

# Code Appendix

```{r, ref.label=knitr::all_labels(),echo=TRUE,eval=FALSE}
```
